1.@contextmanager：通过编写generator来简化上下文管理
例1：
@contextmanager
def tag(name):
    print("<%s>" % name)
    yield
    print("</%s>" % name)

with tag("h1"):
    print("hello")
    print("world")
代码的执行顺序是：
with语句首先执行yield之前的语句，因此打印出<h1>；
yield调用会执行with语句内部的所有语句，因此打印出hello和world；
最后执行yield之后的语句，打印出</h1>。    
<h1>
hello
world
</h1>

例2：
from contextlib import contextmanager

class Query(object):

    def __init__(self, name):
        self.name = name

    def query(self):
        print('Query info about %s...' % self.name)

@contextmanager
def create_query(name):
    print('Begin')
    i = Query(name)
    yield i
    print('End')
    
'''
1.with语句中先调用create_query()函数，并进行到第36行yield i (一个Query实例)
2.然后返回i实例并返回给as后的变量q
3.接着运行缩进中的语句
4.最后处理create_query()中yield后的语句
'''

with create_query('Bob') as q: 
  q.query()
  
>>>Begin
>>>Query info about Bob...
>>>End

2.closing:将一个对象变为上下文对象，从而可以将其用于with语句
例：
from contextlib import closing
from urllib.request import urlopen

with closing(urlopen('https://www.python.org')) as page:
    for line in page:
        print(line)
注：colsing其实就是一个经过@contextmanager装饰过的generator
@contextmanager
def closing(thing):
  try:
  yield thing
  finally:
  thing.close()
