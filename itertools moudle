1.count(start=0, step=1)：会创建一个无限的迭代器，从start开始每隔step迭代
例：
import  itertools
for n in  itertools.count(15):
    print(n)
    if n == 20:
        break
        
15
16
17
18
19
20

2.cycle()会把传入的一个序列无限重复下去：
例：
>>> import itertools
>>> cs = itertools.cycle('ABC') # 注意字符串也是序列的一种
>>> for c in cs:
...     print(c)
...
'A'
'B'
'C'
'A'
'B'
'C'
...

3.repeat():负责把一个元素无限重复下去，如果提供第二个参数就可以限定重复次数
例：
>>> ns = itertools.repeat('A', 3)  # 'A'为重复的元素，，3为重复次数
>>> for n in ns:
...     print(n)
...
A
A
A

4.takewhile(func, iterable):根据函数条件判断来截取出一个有限的序列
例：
>>> natuals = itertools.count(1)
>>> ns = itertools.takewhile(lambda x: x <= 10, natuals)
>>> list(ns)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

5.chain()：可以把一组迭代对象串联起来，形成一个更大的迭代器
例：
>>> for c in itertools.chain('ABC', 'XYZ'):  #参数可为任意iterable
...     print(c)
# 迭代效果：'A' 'B' 'C' 'X' 'Y' 'Z'

6.groupby()：把迭代器中相邻的重复元素挑出来放在一起
>>> for key, group in itertools.groupby('AaaBBbcCAAa', lambda c: c.upper()):  
  #第二个参数为函数，只要作用于函数的两个元素返回的值相等，就可以被认为是在一组
...     print(key, list(group))
...
A ['A', 'a', 'a']
B ['B', 'B', 'b']
C ['c', 'C']
A ['A', 'A', 'a']
